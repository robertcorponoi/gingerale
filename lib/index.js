'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spritesheetToSprites = spritesheetToSprites;
exports.atlasToSprites = atlasToSprites;
Object.defineProperty(exports, "loadSpritesheet", {
  enumerable: true,
  get: function get() {
    return _loaders.loadSpritesheet;
  }
});
Object.defineProperty(exports, "loadXML", {
  enumerable: true,
  get: function get() {
    return _loaders.loadXML;
  }
});
Object.defineProperty(exports, "loadJSON", {
  enumerable: true,
  get: function get() {
    return _loaders.loadJSON;
  }
});

var _loaders = require("./loaders");

/**
 * Returns the individual sprites of a uniform spritesheet. A uniform spritesheet
 * is a spritesheet in which all of the individual sprites are the same size and
 * in a uniform fashion. Even if you have a uniform spritesheet but it has a XML
 * or JSON definition file, use `atlasToSprites` instead.
 * 
 * @param {HTMLImageElement} spritesheet The spritesheet image element to parse.
 * @param {number} spriteWidth The width of every individual sprite in the spritesheet.
 * @param {number} spriteHeight The height of every individual sprite in the spritesheet.
 * @param {SpritesheetToSpritesOptions} [options] The options that can be passed to this method.
 * @param {string} [options.name='sprite'] Sets the name of the individual sprites and used as the name for the file if downloaded.
 * @param {string} [options.crossOrigin=''] Sets the cross-origin property of the spritesheet if the spritesheet is hosted elsewhere.
 * @param {boolean} [options.download=false] Indicates whether the sprites should be downloaded after they're retrieved or not.
 * 
 * @returns {Array<Sprite>} Returns the individual sprites from the spritesheet.
 */
function spritesheetToSprites(spritesheet, spriteWidth, spriteHeight) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var name = options.name ? options.name : 'sprite';
  var canvas = document.createElement('canvas');
  var ctx = canvas.getContext('2d'); // If the `atlas` is not a `HTMLImageElement` then we throw an error as we no
  // longer handle loading in the parse methods.

  if (spritesheet instanceof HTMLImageElement === false) {
    throw new Error('The spritesheet provided is not a `HTMLImageElement`. If you need to load the atlas first, use the loader methods before passing it to the parser.');
  }

  canvas.width = spriteWidth;
  canvas.height = spriteHeight; // We need to know how many rows and columns of images we need to download.
  // This only works if all of the individual sprites in the spritesheet are
  // the same width and height.

  var cols = Math.floor(spritesheet.width / spriteWidth);
  var rows = Math.floor(spritesheet.height / spriteHeight);
  var locX = 0;
  var locY = 0;
  var counter = 1;
  var sprites = [];

  for (var i = 0; i < rows; ++i) {
    for (var j = 0; j < cols; ++j) {
      // Draw the portion of the spritesheet where the current sprite should be to the canvas.
      ctx.drawImage(spritesheet, locX, locY, spriteWidth, spriteHeight, 0, 0, spriteWidth, spriteHeight);
      locX += spriteWidth;
      ctx.clearRect(0, 0, canvas.width, canvas.height); // Create the sprite object and add it to the `sprites` Array.

      var spriteImage = new Image();
      spriteImage.src = canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');
      var sprite = {
        name: "".concat(name, "_").concat(counter),
        x: locX,
        y: locY,
        width: spriteWidth,
        height: spriteHeight,
        isRotated: false,
        image: spriteImage
      };
      sprites.push(sprite);
      counter++;
    }

    locY += spriteHeight;
    locX = 0;
  }

  return sprites;
}
/**
 * Returns the individual sprites of an atlas. An atlas is a spritesheet in which
 * the sprites are in different orders and sizes with their positions defined by
 * a JSON or XML file.
 * 
 * @param {HTMLImageElement} spritesheet The texture atlas image element to parse.
 * @param {Object|XMLDocument} definition The XML or JSON file that defines the locations and sizes of the individual sprites in the spritesheet.
 * @param {AtlasToSpritesOptions} [options]
 * @param {string} [options.jsonPropertyPath='frames.$.frame'] The path to the sprite details in the JSON if a JSON definition is provided. See the documentation for the `AtlasToSpritesOptions` for a more in-depth example.
 * @param {string} [options.crossOrigin=''] Sets the cross-origin property of the atlas if the atlas is hosted elsewhere.
 * @param {boolean} [options.download=false] Indicates whether the sprites should be downloaded after they're retrieved or not.
 * 
 * @returns {Array<Sprite>} Returns the individual sprites from the atlas.
 */


function atlasToSprites(spritesheet, definition) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var canvas = document.createElement('canvas');
  var ctx = canvas.getContext('2d'); // If the `atlas` is not a `HTMLImageElement` then we throw an error as we no
  // longer handle loading in the parse methods.

  if (spritesheet instanceof HTMLImageElement === false) {
    throw new Error('The atlas provided is not a `HTMLImageElement`. If you need to load the atlas first, use the loader methods before passing it to the parser.');
  }

  var sprites = []; // Find out what type of data was provided, XML or JSON. If it's neither of
  // those then we throw an error.

  var dataType;
  if (definition instanceof XMLDocument) dataType = 'xml';else if (definition instanceof Object) dataType = 'json';else throw new Error('The definition must be either XML or JSON');

  switch (dataType) {
    case 'xml':
      var xmlDefinition = definition; // We want to get all nodes that have a `name`, `x`, and `y`, `width`, and 
      // `height` attributes.

      var spriteEntries = xmlDefinition.querySelectorAll('[x][y][width][height]'); // If the above is empty then maybe the `height` and `width` attributes are
      // actually `w` or `h` so we check for that.

      if (spriteEntries.length === 0) spriteEntries = xmlDefinition.querySelectorAll('[x][y][w][h]'); // If both of those are still empty then we can't proceed. Maybe in later
      // updates we'll make this more flexible but I haven't found cases for it
      // yet in the atlas' I've used.

      if (spriteEntries.length === 0) throw new Error('Could not find any rows with `x`, `y`, `width`, or `height` attributes');
      spriteEntries.forEach(function (entry) {
        // Keep track of the sprite's width and height and see if a `rotated` attribute exists.
        var width = parseInt(entry.getAttribute('width') || entry.getAttribute('w'));
        var height = parseInt(entry.getAttribute('height') || entry.getAttribute('h'));
        var isRotated = Boolean(entry.getAttribute('rotated'));
        var spriteWidth = isRotated ? height : width;
        var spriteHeight = isRotated ? width : height;
        if (!spriteWidth || !spriteHeight) throw new Error('Could not find a width or height for the sprite entries');
        var x = parseInt(entry.getAttribute('x'));
        var y = parseInt(entry.getAttribute('y')); // Set the canvas to the size of the sprite and then draw the sprite onto the canvas.

        canvas.width = spriteWidth;
        canvas.height = spriteHeight;
        ctx.drawImage(spritesheet, x, y, spriteWidth, spriteHeight, 0, 0, spriteWidth, spriteHeight);
        var spriteImage = new Image();
        spriteImage.src = canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream'); // Lastly we create the the Sprite object and add it to `sprites`.

        var sprite = {
          name: entry.getAttribute('name'),
          x: x,
          y: y,
          width: spriteWidth,
          height: spriteHeight,
          isRotated: isRotated,
          image: spriteImage
        };
        sprites.push(sprite);
      });
      break;

    case 'json':
      var jsonDefinition = definition; // If a property path as provided in the options then we use that otherwise we use the default one.

      var jsonPropertyPath = options.jsonPropertyPath ? options.jsonPropertyPath : 'frames.$.frame'; // Split the property path on periods so that we can use it to navigate the object.

      var propertyPathSplit = jsonPropertyPath.split('.'); // We need to know the index of the '$' character which denotes the property that contains the
      // individual sprite

      var indexOfSprite = propertyPathSplit.indexOf('$');
      var propertyPathBeforeSprite = propertyPathSplit.splice(0, indexOfSprite); // Now we get the part of the array up until `propertyPathBeforeSprite` so that we can get the
      // parts of the object that we can iterate. 

      var allSpritesInJSON = jsonDefinition;
      propertyPathBeforeSprite.forEach(function (property) {
        return allSpritesInJSON = allSpritesInJSON[property];
      }); // Get the last part of the propertyPathSplit without the $ element.

      var propertyDetailsPath = propertyPathSplit.slice(1);

      var _loop = function _loop(spriteDetails) {
        var spriteEntry = JSON.parse(JSON.stringify(allSpritesInJSON[spriteDetails])); // For each sprite in the JSON we have to finish the object lookup with the remaining values
        // of the `propertyDetailsPath`.

        propertyDetailsPath.forEach(function (property) {
          return spriteEntry = spriteEntry[property];
        });
        var entry = spriteEntry; // Keep track of the sprite's width and height and see if we need to rotate it.

        var width = entry.width || entry.w;
        var height = entry.height || entry.h;
        var isRotated = entry.rotated || allSpritesInJSON[spriteDetails].rotated || false;
        var spriteWidth = isRotated ? height : width;
        var spriteHeight = isRotated ? width : height;
        if (!spriteWidth || !spriteHeight) throw new Error('Could not find a width or height for the sprite entries'); // Set the canvas to the size of the sprite.

        canvas.width = spriteWidth;
        canvas.height = spriteHeight;
        ctx.drawImage(spritesheet, entry.x, entry.y, spriteWidth, spriteHeight, 0, 0, spriteWidth, spriteHeight);
        var spriteImage = new Image();
        spriteImage.src = canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream'); // Lastly we create the Sprite object and add it to `sprites`.

        var sprite = {
          name: entry.name || spriteDetails,
          x: entry.x,
          y: entry.y,
          width: spriteWidth,
          height: spriteHeight,
          isRotated: isRotated,
          image: spriteImage
        };
        sprites.push(sprite);
      };

      for (var spriteDetails in allSpritesInJSON) {
        _loop(spriteDetails);
      }

      break;
  }

  return sprites;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,